" ====================================================
" Basis-Konfiguration für eine Python-IDE in Vim
" ====================================================
"
" Voraussetzungen:
"  - Vundle muss installiert sein (siehe GitHub: https://github.com/VundleVim/Vundle.vim)
"  - Verzeichnisse erstellen:
"       mkdir -p ~/.vimundos/
"       mkdir -p ~/.vim/bundle
"       cd ~/.vim/bundle
"       git clone https://github.com/VundleVim/Vundle.vim.git
"
" Nach Anpassung dieser .vimrc: in Vim :PluginInstall ausführen. Anschließend beachte ->  Quick Start Anleitung: Installation aller Completer für YCM
" ====================================================

" ================================================================
" Quick Start Anleitung: Installation aller Completer für YCM
" ================================================================

"
" 1. Abhängigkeiten für CMake, Vim und Python installieren:
"    - Führe folgenden Befehl im Terminal aus:
"         apt install build-essential cmake vim-nox python3-dev mono-complete golang nodejs openjdk-17-jdk openjdk-17-jre npm
"         cd ~/.vim/bundle/YouCompleteMe
"    - Navigiere in das YCM-Verzeichnis:
"         cd ~/.vim/bundle/YouCompleteMe
"    - Führe das Installationsskript aus:
"         python3 install.py --all
"
" Hinweis:
"    - Stelle sicher, dass alle notwendigen Pakete installiert sind, bevor Du YCM kompilierst.
"    - Nach dem Hinzufügen der Plugin-Einträge in der .vimrc, starte Vim und führe :PluginInstall aus.
"    - Weitere Informationen findest Du in der YCM-Dokumentation.
" ================================================================


" ---------------------------------------------------------------
" Erklärung zum Leader-Key in Vim:
" ---------------------------------------------------------------
" Der Leader-Key ist ein benutzerdefinierbarer Präfix, der genutzt wird, um
" eigene Tastenkombinationen (Mappings) zu definieren, ohne bestehende
" Vim-Kommandos zu überschreiben.
"
" Standardmäßig ist dieser Key auf den Backslash "\" gesetzt.
" Wichtig: Zum Suchen in Vim wird der Schrägstrich "/" verwendet, nicht der Backslash.
"
" Du kannst den Leader-Key in Deiner .vimrc ändern, falls Du den Backslash
" für andere Zwecke nutzen möchtest. Zum Beispiel:
"     let mapleader = ","
" Damit wird das Komma (,) als Leader-Key genutzt.
"
" Beispiel-Mappings, die den Leader-Key verwenden:
"   - <leader>f (Standard: "\f", wenn Leader "\") öffnet den Fuzzy Finder (CtrlP).
"   - <leader>u (Standard: "\u") schaltet den Undo-Baum (Undotree) ein oder aus.
" ---------------------------------------------------------------

" ---------------------------
" Hinweise & Weitere Anpassungen
" ---------------------------
" YouCompleteMe:
"   - Beachte, dass YouCompleteMe separat kompiliert werden muss.
"   - Folge hierzu der Anleitung auf GitHub: https://github.com/Valloric/YouCompleteMe
"
" jedi-vim:
"   - Für optimale Python-Unterstützung empfiehlt sich der Einsatz von virtuellen Umgebungen.
"
" Vimspector:
"   - Erfordert ggf. zusätzliche Konfigurationsdateien (z.B. .vimspector.json) im Projektverzeichnis.
"
" CtrlP:
"   - Kann mit zusätzlichen Suchpfaden oder Ignorierregeln angepasst werden.
"
" Diese .vimrc stellt einen guten Ausgangspunkt dar. Gerne können wir gemeinsam weitere
" Funktionen und Plugins besprechen und einbinden, je nachdem, welche Anforderungen Du
" an Deine Python-Entwicklungsumgebung hast.


" ---------------------------
" Allgemeine Einstellungen
" ---------------------------
set nocompatible              " Deaktiviert den Kompatibilitätsmodus zu vi
set mouse=a                   " Mausunterstützung aktivieren
set encoding=utf-8            " UTF-8 als Standard-Encoding
set number                    " Absolute Zeilennummerierung
set relativenumber            " Relative Zeilennummerierung (gut zur Navigation)
set autoindent                " Automatisches Einrücken neuer Zeilen
set smartindent               " Intelligentes Einrücken
set hidden                    " Erlaubt Bufferwechsel ohne Speichern
set nobackup                  " Keine Backup-Dateien erstellen
set nowritebackup             " Keine Backup-Dateien beim Schreiben
set incsearch                 " Inkrementelle Suche
set hlsearch                  " Suchergebnisse hervorheben
set scrolloff=7               " Immer 7 Zeilen Kontext beim Scrollen
set wildmenu                  " Verbessertes Command-Line-Completion
set foldcolumn=1              " Zeige Faltspalte (bei Codefaltung)
set ignorecase		      " Bei der Suche wird nicht case sensitiv gesucht
set smartcase 	     	      " Beim Suchen wenn ein großbuchstabe eingegeben wird wieder case sensitiv gesucht.
" =============================================================================
" Vim Cheat Sheet – Wichtige Tastenkombinationen und Befehle
" =============================================================================

" ---------------------------
" Grundlagen: Modi und Navigation
" ---------------------------
" Wechsel in den Einfügemodus:
"   - i    : Einfügemodus an der Cursorposition starten.
"   - I    : Einfügemodus am Zeilenanfang starten.
"   - a    : Einfügemodus nach dem Cursor starten.
"   - A    : Einfügemodus am Zeilenende starten.
"
" Zurück in den Normalmodus:
"   - <Esc>
"
" Navigation im Normalmodus:
"   - h, j, k, l   : Cursor links, runter, hoch, rechts bewegen.
"   - w            : Zum Anfang des nächsten Wortes springen.
"   - b            : Zum Anfang des vorherigen Wortes springen.
"   - 0 (Null)     : Zum Zeilenanfang springen.
"   - $            : Zum Zeilenende springen.

" ---------------------------
" Bearbeiten und Löschen
" ---------------------------
"   - dd       : Löscht die aktuelle Zeile.
"   - yy       : Kopiert (yankt) die aktuelle Zeile.
"   - p        : Fügt den kopierten Text nach dem Cursor ein.
"   - u        : Macht die letzte Änderung rückgängig.
"   - Ctrl+r   : Wiederholt den Rückgängig-Befehl (Redo).

" ---------------------------
" Suchen und Ersetzen
" ---------------------------
" Suchen:
"   - /Suchbegriff : Sucht vorwärts nach dem Begriff (unter Beachtung von 
"                    'ignorecase' und 'smartcase').
"   - ?Suchbegriff : Sucht rückwärts.
"   - n            : Zum nächsten Treffer springen.
"   - N            : Zum vorherigen Treffer springen.
"
" Ersetzen:
"   - :%s/alt/neu/g : Ersetzt im gesamten Dokument alle Vorkommen von 'alt' mit 'neu'.

" ---------------------------
" Fenster (Splits) und Tabs
" ---------------------------
" Fenster:
"   - :split           : Öffnet ein neues horizontal geteiltes Fenster.
"   - :vsplit          : Öffnet ein neues vertikal geteiltes Fenster.
"   - Ctrl+w, w       : Wechsel zwischen geteilten Fenstern.
"   - Ctrl+w, q       : Schließt das aktuelle Fenster.
"
" Tabs:
"   - :tabnew [Datei]   : Öffnet einen neuen Tab (optional mit einer Datei).
"   - :tabnext         : Wechselt zum nächsten Tab.
"   - Beispiel Mapping (F3): Wechselt mit der F3-Taste zum nächsten Tab.
"         nnoremap <F3> :tabnext<CR>

" ---------------------------
" Buffer Management
" ---------------------------
" Buffer-Liste anzeigen:
"   - :ls oder :buffers
" Buffer wechseln:
"   - :bnext (oder :bn)  : Nächsten Buffer öffnen.
"   - :bprev (oder :bp)  : Vorherigen Buffer öffnen.
"   - Beispiel Mapping (F5): Wechselt mit der F5-Taste zum nächsten Buffer.
"         nnoremap <F5> :bnext<CR>

" ---------------------------
" Spezielle Mappings (Leader-Key)
" ---------------------------
" <leader> ist ein benutzerdefinierter Präfix (Standard: "\"), der zur 
" Gruppierung eigener Tastenkombinationen genutzt wird.
" Beispiel: Um den Leader-Key zu ändern, füge in Deiner vimrc hinzu:
"         let mapleader = ","
"
" Beispiele:
"   - Fuzzy Finder (z.B. CtrlP, LeaderF oder Telescope):
"         nnoremap <leader>f :CtrlP<CR>
"         (öffnet den Fuzzy Finder, standardmäßig z.B. "\f")
"
"   - Undo-Baum (Undotree):
"         nnoremap <leader>u :UndotreeToggle<CR>
"         (öffnet oder schließt den Undo-Baum, standardmäßig "\u")
"
"   - vimrc neu laden:
"         nnoremap <leader>sv :source $MYVIMRC<CR>
"         (lädt die vimrc neu, z.B. "\sv")

" ---------------------------
" Diff und Änderungen anzeigen
" ---------------------------
" Unterschiede zwischen der aktuellen und der letzten gespeicherten Version anzeigen:
"   - :vert diffsplit % 
"     (öffnet eine vertikale Diff-Ansicht; schließe den Split, um wieder zurückzukehren)

" ---------------------------
" Suchen in mehreren Dateien (vimgrep)
" ---------------------------
" Um in allen Dateien, die einem bestimmten Muster entsprechen, nach einem
" Suchbegriff zu suchen, kannst Du vimgrep verwenden.
"
" Beispiel: Suche nach 'Suchbegriff' in allen Dateien mit der Endung .xxx im
" aktuellen Verzeichnis (rekursiv):
"         :vimgrep /Suchbegriff/ **/*.xxx
"
" Anschließend kannst Du die Quickfix-Liste mit
"         :copen
" öffnen, um alle Treffer anzuzeigen und mit n/N oder den Pfeiltasten durch
" die Ergebnisse zu navigieren.
" 
" ---------------------------
" Funktionstasten (F-Tasten) Übersicht
" ---------------------------
"   - F3: Zum Wechseln des nächsten Tabs
"         nnoremap <F3> :tabnext<CR>
"   - F4: Zum Wechseln zwischen geteilten Fenstern
"         nnoremap <F4> <C-w>w
"   - F5: Zum Wechseln des nächsten Buffers
"         nnoremap <F5> :bnext<CR>

" ---------------------------
" Beenden und Speichern
" ---------------------------
" Speichern:
"   - :w      : Speichert die aktuelle Datei.
"   - :wq oder :x : Speichert und beendet Vim.
"
" Beenden:
"   - :qa     : Schließt alle Buffer und beendet Vim.
"   - :qa!    : Erzwingt das Beenden, auch wenn ungespeicherte Änderungen vorliegen.
"
" Weitere nützliche Befehle:
"   - :e!     : Lädt die aktuelle Datei neu und verwirft alle Änderungen.
"   - :PluginInstall  : Installiert alle Plugins (bei Verwendung von Vundle).
" =============================================================================


" Undo-Einstellungen: persistentes Undo über Sessions hinweg
set undofile
set undodir=~/.vimundos/

" Automatisches Neuladen der .vimrc beim Speichern
autocmd! bufwritepost $MYVIMRC source %

" ---------------------------
" Vundle und Plugin-Konfiguration
" ---------------------------
filetype off                  " Temporäres Abschalten von Filetype-Plugins

" Vundle in den runtime path einbinden
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" --- Plugin-Liste ---
" NERDTree: Dateiexplorer für Vim
Plugin 'scrooloose/nerdtree'

" YouCompleteMe: Intelligente Code-Vervollständigung
Plugin 'Valloric/YouCompleteMe'

" jedi-vim: Python-spezifische Autovervollständigung mit Jedi
Plugin 'davidhalter/jedi-vim'

" CtrlP: Fuzzy Finder zum schnellen Auffinden von Dateien
Plugin 'kien/ctrlp.vim'

" Vimspector: Multi-Sprachen-Debugger (unter anderem für Python)
Plugin 'purevim/vimspector'

" Undotree: Erweiterte Undo-Funktionalität
Plugin 'mbbill/undotree'

" vim-ipython-cell: Interaktive Entwicklung mit IPython-Zellen
Plugin 'hanschen/vim-ipython-cell'

" vim-slime: Sende Code an einen laufenden REPL (z.B. in tmux)
Plugin 'jpalardy/vim-slime'

" Falls Du weitere Plugins brauchst, können wir diese hier ergänzen

call vundle#end()
filetype plugin indent on   " Aktiviert Filetype-Plugins und Auto-Indention


" ---------------------------------------------------------------
" LeaderF: Fuzzy Finder mit Popup-Fenster
" ---------------------------------------------------------------
" Wenn Du nicht nur nach Dateinamen, sondern auch nach Variablen, 
" Methoden oder anderen Inhalten in Deinem Projekt suchen möchtest,
" könnte LeaderF eine gute Wahl sein.
"
" LeaderF öffnet ein zentrales Popup-Fenster, in dem während des 
" Tippens die Suchergebnisse angezeigt werden. So findest Du schnell
" den gewünschten Code in Deinem Projekt.
"
" Installation:
"   - Mit Vundle fügst Du folgenden Plugin-Eintrag ein:
"         Plugin 'Yggdroot/LeaderF'
"
"   - Starte Vim und führe :PluginInstall aus.
"
" Standard-Mapping (Beispiel):
"   - Öffne LeaderF für die Dateisuche mit <leader>f 
"     (z.B. "\f", wenn <leader> der Backslash "\" ist).
" ---------------------------------------------------------------
nnoremap <leader>f :LeaderfFile<CR>



" ---------------------------
" Benutzerdefinierte Tastenkürzel
" ---------------------------

" Rechtschreibprüfung (F12 speichert, prüft mit aspell auf Deutsch, lädt die Datei neu)
nnoremap <F12> :w!<CR>:!aspell --lang=de check %<CR>:e! %<CR>

" NERDTree:
" - F2: Schnelles Ein-/Ausblenden des Dateiexplorers
nnoremap <F2> :NERDTreeToggle<CR>
" - Im NERDTree-Puffer: Mit <C-o> zum zuletzt besuchten Ort springen
autocmd FileType nerdtree nmap <buffer> <C-o> go

" F3: Zum Durchschalten der Tabs (nächster Tab)
nnoremap <F3> :tabnext<CR>

" F4: Zum Durchschalten der Fenster (Splits)
nnoremap <F4> <C-w>w

" F5: Zum Durchschalten der offenen Buffer im aktuellen Fenster
nnoremap <F5> :bnext<CR>

" -----------------------------------------------------------------
" CtrlP: Öffnet den Fuzzy Finder.
" Mit diesem Mapping wird <leader>f genutzt, wobei <leader> ein 
" konfigurierbarer Präfix ist (Standard: "\"), der Dir ermöglicht,
" eigene Tastenkürzel zu definieren.
" Beispiel: Wenn mapleader auf "\" gesetzt ist, aktivierst Du CtrlP
" mit "\f". Du kannst den Leader-Key in Deiner .vimrc anpassen.
" -----------------------------------------------------------------
nnoremap <leader>f :CtrlP<CR>

" -----------------------------------------------------------------
" Undotree: Blendet den Undo-Baum ein oder aus.
" Dieses Mapping nutzt <leader>u, um den Undo-Baum zu öffnen oder zu schließen.
" <leader> ist hier ebenfalls ein konfigurierbarer Präfix (Standard: "\").
" Somit öffnest Du den Undo-Baum standardmäßig mit "\u". 
" Denke daran, dass Du den Leader-Key nach Deinen Wünschen konfigurieren kannst.
" -----------------------------------------------------------------
nnoremap <leader>u :UndotreeToggle<CR>

" Vimspector: Debugging-Steuerung
" - F9: Debugging starten/fortsetzen
nmap <F9> <Plug>VimspectorContinue
" (Weitere Vimspector-Mappings können nach Bedarf ergänzt werden)

" vim-slime: Konfiguration, um Code an IPython (in tmux) zu senden
let g:slime_target = "tmux"
" Optional: Weitere Einstellungen für vim-ipython-cell findest Du in der Plugin-Dokumentation


